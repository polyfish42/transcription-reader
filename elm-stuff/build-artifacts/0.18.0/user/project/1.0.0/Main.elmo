var _user$project$Main$padTime = function (time) {
	return (_elm_lang$core$Native_Utils.cmp(time, 10) < 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		'0',
		_elm_lang$core$Basics$toString(time)) : _elm_lang$core$Basics$toString(time);
};
var _user$project$Main$viewTime = function (time) {
	var totalSeconds = _elm_lang$core$Basics$floor(time);
	var seconds = A2(_elm_lang$core$Basics_ops['%'], totalSeconds, 60);
	var minutes = A2(_elm_lang$core$Basics_ops['%'], (totalSeconds / 60) | 0, 60);
	var hours = A2(_elm_lang$core$Basics_ops['%'], (totalSeconds / (60 * 60)) | 0, 60);
	return (_elm_lang$core$Native_Utils.cmp(totalSeconds, 60 * 60) > 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Main$padTime(hours),
		A2(
			_elm_lang$core$Basics_ops['++'],
			':',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Main$padTime(minutes),
				A2(
					_elm_lang$core$Basics_ops['++'],
					':',
					_user$project$Main$padTime(seconds))))) : A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Main$padTime(minutes),
		A2(
			_elm_lang$core$Basics_ops['++'],
			':',
			_user$project$Main$padTime(seconds)));
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$noHTMLCode = function (capText) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('&#39;'),
		function (_p0) {
			return '\'';
		},
		capText);
};
var _user$project$Main$formatCaptions = function (captions) {
	return A2(
		_elm_lang$core$List$map,
		function (cap) {
			return {
				time: cap.time,
				text: _user$project$Main$noHTMLCode(cap.text)
			};
		},
		captions);
};
var _user$project$Main$youTubeURIParser = function () {
	var shareURI = _elm_community$parser_combinators$Combine$while(
		F2(
			function (x, y) {
				return !_elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('?')));
	var normalURI = A2(
		_elm_community$parser_combinators$Combine_ops['*>'],
		A2(
			_elm_community$parser_combinators$Combine$manyTill,
			_elm_community$parser_combinators$Combine_Char$anyChar,
			_elm_community$parser_combinators$Combine$regex('v=')),
		_elm_community$parser_combinators$Combine$while(
			F2(
				function (x, y) {
					return !_elm_lang$core$Native_Utils.eq(x, y);
				})(
				_elm_lang$core$Native_Utils.chr('&'))));
	var chooseParser = function (str) {
		return _elm_lang$core$Native_Utils.eq(str, 'https://www.youtube.com/watch?') ? normalURI : shareURI;
	};
	return A2(
		_elm_community$parser_combinators$Combine_ops['>>='],
		A2(
			_elm_community$parser_combinators$Combine$or,
			_elm_community$parser_combinators$Combine$string('https://www.youtube.com/watch?'),
			_elm_community$parser_combinators$Combine$string('https://youtu.be/')),
		chooseParser);
}();
var _user$project$Main$videoId = function (uri) {
	var _p1 = A2(_elm_community$parser_combinators$Combine$parse, _user$project$Main$youTubeURIParser, uri);
	if (_p1.ctor === 'Ok') {
		return _p1._0._2;
	} else {
		return A2(_elm_lang$core$String$join, ' or ', _p1._0._2);
	}
};
var _user$project$Main$errorMessage = function (message) {
	var _p2 = message;
	switch (_p2.ctor) {
		case 'BadUrl':
			return _p2._0;
		case 'BadPayload':
			return _p2._0;
		case 'NetworkError':
			return 'We weren\'t able to fetch the captions for this video. Please check your internet connection.';
		case 'BadStatus':
			return _p2._0.body;
		default:
			return 'There was an error processing your request';
	}
};
var _user$project$Main$loadVideo = _elm_lang$core$Native_Platform.outgoingPort(
	'loadVideo',
	function (v) {
		return v;
	});
var _user$project$Main$skipToTime = _elm_lang$core$Native_Platform.outgoingPort(
	'skipToTime',
	function (v) {
		return v;
	});
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {uri: a, captions: b, errorMessage: c};
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A3(
		_user$project$Main$Model,
		'',
		{ctor: '[]'},
		''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Caption = F2(
	function (a, b) {
		return {time: a, text: b};
	});
var _user$project$Main$captionDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Main$Caption,
	A2(_elm_lang$core$Json_Decode$field, 'time', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode$field, 'text', _elm_lang$core$Json_Decode$string));
var _user$project$Main$decodeCaptionJson = _elm_lang$core$Json_Decode$list(_user$project$Main$captionDecoder);
var _user$project$Main$SkipToTime = function (a) {
	return {ctor: 'SkipToTime', _0: a};
};
var _user$project$Main$viewCaptions = function (captions) {
	return A2(
		_elm_lang$core$List$map,
		function (caption) {
			return A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$Main$SkipToTime(caption.time)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('transcript__caption'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(caption.text),
					_1: {ctor: '[]'}
				});
		},
		captions);
};
var _user$project$Main$NewCaptions = function (a) {
	return {ctor: 'NewCaptions', _0: a};
};
var _user$project$Main$fetchCaptions = function (uri) {
	var url = A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:3000/api/transcript?uri=', uri);
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Main$decodeCaptionJson);
	return A2(_elm_lang$http$Http$send, _user$project$Main$NewCaptions, request);
};
var _user$project$Main$update = F2(
	function (message, model) {
		var _p3 = message;
		switch (_p3.ctor) {
			case 'UpdateUri':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{uri: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchCaptions':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$fetchCaptions(model.uri)
				};
			case 'NewCaptions':
				if (_p3._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								captions: _user$project$Main$formatCaptions(_p3._0._0)
							}),
						_1: _user$project$Main$loadVideo(
							_user$project$Main$videoId(model.uri))
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								errorMessage: _user$project$Main$errorMessage(_p3._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$skipToTime(_p3._0)
				};
		}
	});
var _user$project$Main$FetchCaptions = {ctor: 'FetchCaptions'};
var _user$project$Main$UpdateUri = function (a) {
	return {ctor: 'UpdateUri', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(model.errorMessage),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateUri),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$FetchCaptions),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Submit'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('transcript'),
								_1: {ctor: '[]'}
							},
							_user$project$Main$viewCaptions(model.captions)),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
