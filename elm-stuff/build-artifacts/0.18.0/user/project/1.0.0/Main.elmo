var _user$project$Main$viewErrorMessage = function (message) {
	var _p0 = message;
	if (_p0.ctor === 'Just') {
		return _elm_lang$html$Html$text(_p0._0);
	} else {
		return _elm_lang$html$Html$text('');
	}
};
var _user$project$Main$padTime = function (time) {
	return (_elm_lang$core$Native_Utils.cmp(time, 10) < 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		'0',
		_elm_lang$core$Basics$toString(time)) : _elm_lang$core$Basics$toString(time);
};
var _user$project$Main$viewTime = function (time) {
	var totalSeconds = _elm_lang$core$Basics$floor(time);
	var seconds = A2(_elm_lang$core$Basics_ops['%'], totalSeconds, 60);
	var minutes = A2(_elm_lang$core$Basics_ops['%'], (totalSeconds / 60) | 0, 60);
	var hours = A2(_elm_lang$core$Basics_ops['%'], (totalSeconds / (60 * 60)) | 0, 60);
	return (_elm_lang$core$Native_Utils.cmp(totalSeconds, 60 * 60) > 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Main$padTime(hours),
		A2(
			_elm_lang$core$Basics_ops['++'],
			':',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Main$padTime(minutes),
				A2(
					_elm_lang$core$Basics_ops['++'],
					':',
					_user$project$Main$padTime(seconds))))) : A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Main$padTime(minutes),
		A2(
			_elm_lang$core$Basics_ops['++'],
			':',
			_user$project$Main$padTime(seconds)));
};
var _user$project$Main$onClick = function (message) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'click',
		{stopPropagation: true, preventDefault: false},
		_elm_lang$core$Json_Decode$succeed(message));
};
var _user$project$Main$allCaptions = function (captionHistory) {
	return A2(
		_elm_lang$core$List$sortBy,
		function (_) {
			return _.name;
		},
		{ctor: '::', _0: captionHistory.current, _1: captionHistory.rest});
};
var _user$project$Main$youTubeURIParser = function () {
	var shareURI = _elm_community$parser_combinators$Combine$while(
		F2(
			function (x, y) {
				return !_elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('?')));
	var normalURI = A2(
		_elm_community$parser_combinators$Combine_ops['*>'],
		A2(
			_elm_community$parser_combinators$Combine$manyTill,
			_elm_community$parser_combinators$Combine_Char$anyChar,
			_elm_community$parser_combinators$Combine$regex('v=')),
		_elm_community$parser_combinators$Combine$while(
			F2(
				function (x, y) {
					return !_elm_lang$core$Native_Utils.eq(x, y);
				})(
				_elm_lang$core$Native_Utils.chr('&'))));
	var chooseParser = function (str) {
		return _elm_lang$core$Native_Utils.eq(str, 'https://www.youtube.com/watch?') ? normalURI : shareURI;
	};
	return A2(
		_elm_community$parser_combinators$Combine_ops['>>='],
		A2(
			_elm_community$parser_combinators$Combine$or,
			_elm_community$parser_combinators$Combine$string('https://www.youtube.com/watch?'),
			_elm_community$parser_combinators$Combine$string('https://youtu.be/')),
		chooseParser);
}();
var _user$project$Main$videoId = function (uri) {
	var _p1 = A2(_elm_community$parser_combinators$Combine$parse, _user$project$Main$youTubeURIParser, uri);
	if (_p1.ctor === 'Ok') {
		return _p1._0._2;
	} else {
		return A2(_elm_lang$core$String$join, ' or ', _p1._0._2);
	}
};
var _user$project$Main$addCaptions = F2(
	function (model, captions) {
		var isEnglish = function (caption) {
			return A2(_elm_lang$core$String$contains, 'English', caption.name) && (!A2(_elm_lang$core$String$contains, '(auto-generated)', caption.name));
		};
		var _p2 = A2(_elm_lang$core$List$partition, isEnglish, captions);
		_v2_2:
		do {
			if (_p2.ctor === '_Tuple2') {
				if (_p2._0.ctor === '::') {
					if (_p2._0._1.ctor === '[]') {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								caption: _elm_lang$core$Maybe$Just(
									{current: _p2._0._0, rest: _p2._1})
							});
					} else {
						break _v2_2;
					}
				} else {
					if (_p2._1.ctor === '::') {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								caption: _elm_lang$core$Maybe$Just(
									{current: _p2._1._0, rest: _p2._1._1})
							});
					} else {
						break _v2_2;
					}
				}
			} else {
				break _v2_2;
			}
		} while(false);
		return model;
	});
var _user$project$Main$errorMessage = function (message) {
	var _p3 = message;
	switch (_p3.ctor) {
		case 'BadUrl':
			return _p3._0;
		case 'BadPayload':
			return _p3._0;
		case 'NetworkError':
			return 'We weren\'t able to fetch the captions for this video. Please check your internet connection.';
		case 'BadStatus':
			return _p3._0.body;
		default:
			return 'There was an error processing your request';
	}
};
var _user$project$Main$loadVideo = _elm_lang$core$Native_Platform.outgoingPort(
	'loadVideo',
	function (v) {
		return v;
	});
var _user$project$Main$skipToTime = _elm_lang$core$Native_Platform.outgoingPort(
	'skipToTime',
	function (v) {
		return v;
	});
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {uri: a, caption: b, errorMessage: c, dropDownStatus: d};
	});
var _user$project$Main$CaptionHistory = F2(
	function (a, b) {
		return {current: a, rest: b};
	});
var _user$project$Main$Caption = F2(
	function (a, b) {
		return {name: a, captions: b};
	});
var _user$project$Main$Line = F2(
	function (a, b) {
		return {time: a, text: b};
	});
var _user$project$Main$lineDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Main$Line,
	A2(_elm_lang$core$Json_Decode$field, 'time', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode$field, 'text', _elm_lang$core$Json_Decode$string));
var _user$project$Main$captionDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Main$Caption,
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'captions',
		_elm_lang$core$Json_Decode$list(_user$project$Main$lineDecoder)));
var _user$project$Main$decodeCaptionJson = _elm_lang$core$Json_Decode$list(_user$project$Main$captionDecoder);
var _user$project$Main$Closed = {ctor: 'Closed'};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A4(_user$project$Main$Model, '', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _user$project$Main$Closed),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Open = {ctor: 'Open'};
var _user$project$Main$SkipToTime = function (a) {
	return {ctor: 'SkipToTime', _0: a};
};
var _user$project$Main$viewCaption = function (captionHistory) {
	var _p4 = captionHistory;
	if (_p4.ctor === 'Just') {
		return A2(
			_elm_lang$core$List$map,
			function (caption) {
				return A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _user$project$Main$onClick(
							_user$project$Main$SkipToTime(caption.time)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('transcript__caption'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$Main$viewTime(caption.time),
								A2(_elm_lang$core$Basics_ops['++'], ': ', caption.text))),
						_1: {ctor: '[]'}
					});
			},
			_p4._0.current.captions);
	} else {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('No captions found for this video'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$Main$CaptionPicked = function (a) {
	return {ctor: 'CaptionPicked', _0: a};
};
var _user$project$Main$viewCaptionOptions = function (caption) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _user$project$Main$onClick(
				_user$project$Main$CaptionPicked(caption)),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(caption.name),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$BlurDropDown = {ctor: 'BlurDropDown'};
var _user$project$Main$subscriptions = function (model) {
	var _p5 = model.dropDownStatus;
	if (_p5.ctor === 'Closed') {
		return _elm_lang$core$Platform_Sub$none;
	} else {
		return _elm_lang$mouse$Mouse$clicks(
			_elm_lang$core$Basics$always(_user$project$Main$BlurDropDown));
	}
};
var _user$project$Main$ToggleDropDown = {ctor: 'ToggleDropDown'};
var _user$project$Main$viewCaptionPicker = function (model) {
	var _p6 = model.caption;
	if (_p6.ctor === 'Just') {
		var _p7 = _p6._0;
		var displayStyle = _elm_lang$core$Native_Utils.eq(model.dropDownStatus, _user$project$Main$Open) ? {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
			_1: {ctor: '[]'}
		} : {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Main$onClick(_user$project$Main$ToggleDropDown),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(_p7.current.name),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('â–¾'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(displayStyle),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$List$map,
							_user$project$Main$viewCaptionOptions,
							_user$project$Main$allCaptions(_p7))),
					_1: {ctor: '[]'}
				}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _user$project$Main$NewCaptions = function (a) {
	return {ctor: 'NewCaptions', _0: a};
};
var _user$project$Main$fetchCaptions = function (uri) {
	var url = A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:3000/api/transcript?uri=', uri);
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Main$decodeCaptionJson);
	return A2(_elm_lang$http$Http$send, _user$project$Main$NewCaptions, request);
};
var _user$project$Main$update = F2(
	function (message, model) {
		var _p8 = message;
		switch (_p8.ctor) {
			case 'UpdateUri':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{uri: _p8._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchCaptions':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{errorMessage: _elm_lang$core$Maybe$Nothing}),
					_1: _user$project$Main$fetchCaptions(model.uri)
				};
			case 'NewCaptions':
				if (_p8._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Main$addCaptions, model, _p8._0._0),
						_1: _user$project$Main$loadVideo(
							_user$project$Main$videoId(model.uri))
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								errorMessage: _elm_lang$core$Maybe$Just(
									_user$project$Main$errorMessage(_p8._0._0))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ToggleDropDown':
				var newDropDownStatus = _elm_lang$core$Native_Utils.eq(model.dropDownStatus, _user$project$Main$Closed) ? _user$project$Main$Open : _user$project$Main$Closed;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{dropDownStatus: newDropDownStatus}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'BlurDropDown':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{dropDownStatus: _user$project$Main$Closed}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CaptionPicked':
				var setCurrent = function (capTuple) {
					var _p9 = capTuple;
					if (((_p9.ctor === '_Tuple2') && (_p9._0.ctor === '::')) && (_p9._0._1.ctor === '[]')) {
						return _elm_lang$core$Maybe$Just(
							{current: _p9._0._0, rest: _p9._1});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				};
				var selectCurrent = function (capList) {
					return _elm_lang$core$Maybe$Just(
						A2(
							_elm_lang$core$List$partition,
							function (x) {
								return _elm_lang$core$Native_Utils.eq(x.name, _p8._0.name);
							},
							capList));
				};
				var newCaptions = A2(
					_elm_lang$core$Maybe$andThen,
					setCurrent,
					A2(
						_elm_lang$core$Maybe$andThen,
						selectCurrent,
						A2(
							_elm_lang$core$Maybe$andThen,
							function (c) {
								return _elm_lang$core$Maybe$Just(
									{ctor: '::', _0: c.current, _1: c.rest});
							},
							model.caption)));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{caption: newCaptions, dropDownStatus: _user$project$Main$Closed}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$skipToTime(_p8._0)
				};
		}
	});
var _user$project$Main$FetchCaptions = {ctor: 'FetchCaptions'};
var _user$project$Main$UpdateUri = function (a) {
	return {ctor: 'UpdateUri', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _user$project$Main$viewErrorMessage(model.errorMessage),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateUri),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _user$project$Main$onClick(_user$project$Main$FetchCaptions),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Submit'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$Main$viewCaptionPicker(model),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('transcript'),
									_1: {ctor: '[]'}
								},
								_user$project$Main$viewCaption(model.caption)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
