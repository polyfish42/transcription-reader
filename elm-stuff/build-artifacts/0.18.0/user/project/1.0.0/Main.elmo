var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$errorMessage = function (message) {
	var _p0 = message;
	switch (_p0.ctor) {
		case 'BadUrl':
			return _p0._0;
		case 'BadPayload':
			return _p0._0;
		case 'NetworkError':
			return 'We weren\'t able to fetch the captions for this video. Please check your internet connection.';
		case 'BadStatus':
			return _p0._0.body;
		default:
			return 'There was an error processing your request';
	}
};
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {uri: a, captions: b, errorMessage: c};
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A3(
		_user$project$Main$Model,
		'',
		{ctor: '[]'},
		''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Caption = F2(
	function (a, b) {
		return {time: a, caption: b};
	});
var _user$project$Main$captionDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Main$Caption,
	A2(_elm_lang$core$Json_Decode$field, 'time', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode$field, 'text', _elm_lang$core$Json_Decode$string));
var _user$project$Main$decodeCaptionJson = _elm_lang$core$Json_Decode$list(_user$project$Main$captionDecoder);
var _user$project$Main$NewCaptions = function (a) {
	return {ctor: 'NewCaptions', _0: a};
};
var _user$project$Main$fetchCaptions = function (uri) {
	var url = A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:3000/api/transcript?uri=', uri);
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Main$decodeCaptionJson);
	return A2(_elm_lang$http$Http$send, _user$project$Main$NewCaptions, request);
};
var _user$project$Main$update = F2(
	function (message, model) {
		var _p1 = message;
		switch (_p1.ctor) {
			case 'UpdateUri':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{uri: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchCaptions':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$fetchCaptions(model.uri)
				};
			default:
				if (_p1._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{captions: _p1._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								errorMessage: _user$project$Main$errorMessage(_p1._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$Main$FetchCaptions = {ctor: 'FetchCaptions'};
var _user$project$Main$UpdateUri = function (a) {
	return {ctor: 'UpdateUri', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateUri),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$FetchCaptions),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Submit'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
